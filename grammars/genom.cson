scopeName: 'source.gen'
name: 'GenoM'
fileTypes: [
  'gen', 'idl'
]

# control keywords
patterns: [
    { include: '#comment-doc' },
    { include: '#preprocessor' },

    { include: '#comment-line' },
    { include: '#comment-block' },

    { include: '#base-type' },
    { include: '#storage-modifier' },
    { include: '#optional' },
    { include: '#template' },
    { include: '#numeric' },
    { include: '#section' },
    { include: '#struct' },
    { include: '#header' },
    { include: '#native' },
    { include: '#local' },
    { include: '#specifier' },
    { include: '#specifier-doc' },
    { include: '#specifier-period' },
    { include: '#specifier-validate' },
    { include: '#task' },
    { include: '#service' },
    { include: '#ids' },
    { include: '#codel' },
    { include: '#port' },
    { include: '#variable' }
]

repository:
    'base-type': {
        match: '\\b(boolean|unsigned short|short|unsigned long|long|unsigned long long|long long|float|double|char|octet|any|array|string|sequence)\\b'
        name: 'storage.type.gen'
    }

    'block': {
        begin: '{'
        end: '}'
        name: 'meta.block.gen'
        patterns: [
            { include: '$self' }
        ]
    }

    'codel': {
        begin: '\\b((?:async\\s*)?codel)\\b\\s*'
        end: '(?<=;)\\s*\\n'
        beginCaptures:
            1: name: 'keyword.other.gen'
        patterns: [
            {
                begin: '(<)'
                end: '(>)'
                patterns: [
                    {
                        match: '\\b(\\w+)\\b'
                        name: 'entity.tag.gen'
                    }
                ]
            },
            { include: '#param' },
            { include: '#yield' }
        ]
    }

    'comment-block': {
        begin: '(?!/\\*/)(?=/\\*)'
        end: '(?<!/)\\*/'
        name: 'comment.block.gen'
    }

    'comment-doc': {
        begin: '(?=/\\*/)'
        end: '(?<!/)\\*/'
        name: 'comment.block.documentation.gen'
    }

    'comment-line': {
        match: '//.*\\n'
        name: 'comment.line.double-slash.gen'
    }

    'header': {
        begin : '\\b(version|email|lang|require|codels-require|provides|uses)\\b';
        end: ';'
        beginCaptures:
            1: name: 'keyword.other.gen'
        patterns: [
            { include: '#string' }
        ]
    }

    'ids': {
        begin: '\\b(ids)\\b'
        end: ';'
        name: 'meta.ids-block.gen'
        beginCaptures:
            1: name: 'keyword.control.gen'
        patterns: [
            { include: '#comment-line' },
            { include: '#comment-block' },
            { include: '#block' }
        ]
    }

    'include': {
        begin: '(#\\s*include)'
        end: '(?<!\\\\)(?=\\n)'
        name: 'meta.preprocessor.gen'
        beginCaptures:
            1: name: 'keyword.control.gen'
        patterns: [
            { include: '#string' },
            { include: '$self'}
        ]
    }

    'keyword': {
        match: '#\\s*(define|elif|else|endif|if|ifdef|ifndef|line|undef)\\b'
        name: 'keyword.control.gen'
    }

    'local': {
        match: '\\b(local)\\b'
        captures:
            1: name: 'keyword.other.gen'
    }

    'native': {
        begin: '\\b(native|typedef)\\b'
        end: ';'
        beginCaptures:
            1: name: 'keyword.control.gen'
        patterns: [
            {
                match: '([_a-zA-Z]\\w*)'
                name: 'entity.name.type.gen'
            },
            { include: '#base-type' },
            { include: '#template' }
        ]
    }

    'numeric': {
        match: '(?<![\'\\.])(?:(?:(?:\\b\\d(?:[\\d\']*\\d)?\\.\\d(?:[\\d\']*\\d)?|\\B\\.\\d(?:[\\d\']*\\d)?)(?:[Ee][+-]?\\d(?:[\\d\']*\\d)?)?(?:[fFlL]|(?:i[fl]?|h|min|[mun]?s|_\\w*))?\\b|(?:\\b\\d(?:[\\d\']*\\d)?\\.)(?:\\B|(?:[fFlL]|(?:i[fl]?|h|min|[mun]?s|_\\w*))\\b|(?:[Ee][+-]?\\d(?:[\\d\']*\\d)?)(?:[fFlL]|(?:i[fl]?|h|min|[mun]?s|_\\w*))?\\b)|\\b\\d(?:[\\d\']*\\d)?(?:[Ee][+-]?\\d(?:[\\d\']*\\d)?)(?:[fFlL]|(?:i[fl]?|h|min|[mun]?s|_\\w*))?\\b)|\\b(?:(?:[1-9](?:[\\d\']*\\d)?|0(?:[0-7\']*[0-7])?|0[Xx][\\da-fA-F](?:[\\da-fA-F\']*[\\da-fA-F])?|0[Bb][01](?:[01\']*[01])?)(?:(?:l{1,2}|L{1,2})[uU]?|[uU](?:l{0,2}|L{0,2})|(?:i[fl]?|h|min|[mun]?s|_\\w*))?)\\b)(?!\\.)'
        name: 'constant.numeric.gen'
    }

    'optional': {
        begin: '\\b(optional)'
        end: ';'
        beginCaptures:
            1: name: 'keyword.other.gen'
        patterns: [
            { include: '#template' }
        ]
    }

    'param': {
        begin: '\\b((?:(?:port|ids|local)\\s*)?(?:in|out|inout))\\b'
        end: '(,|\\))'
        beginCaptures:
            1: name: 'entity.tag.gen'
    }

    'param-service': {
        begin: '\\b(in|out|inout)\\b'
        end: '(,|\\))'
        beginCaptures:
            1: name: 'entity.tag.gen'
        patterns: [
            {
                begin: ':\\s*"'
                end: '"'
            },
            {
                begin: '{'
                end: '}'
                patterns: [
                    { include: '#base-type' },
                    { include: '#string' },
                    { include: '#numeric' }
                ]
            },
            {
                match: '([a-z-A-Z0-9\\.:_]*)\\s*([a-z-A-Z0-9_.]*)\\s*='
                captures:
                    1: name: 'storage.type.gen'
            },
            { include: '#base-type' },
            { include: '#string' },
            { include: '#numeric' }
        ]
    }

    'port': {
        match: '\\b(port)\\s+((?:multiple)?\\s*(?:in|out))\\s+([0-9a-zA-Z_:]*).*\\b\\s*;'
        captures:
            1: name: 'keyword.control.gen'
            2: name: 'keyword.other.gen'
            3: name: 'storage.type.gen'
    }

    'pragma': {
        begin: '(#\\s*pragma)'
        end: '(?<!\\\\)(?=\\n)'
        name: 'meta.preprocessor.gen'
        beginCaptures:
            1: name: 'keyword.control.gen'
        patterns: [
            {
                begin: '(require)'
                end: '(?<!\\\\)(?=\\n)'
                beginCaptures:
                    1: name: 'keyword.control.gen'
                patterns: [
                    { include: '#string' },
                    { include: '$self'}
                ]
            },
            {
                match: '(provides)'
                captures:
                    1: name: 'keyword.control.gen'
                patterns: [
                    { include: '$self'}
                ]
            },
            {
                begin: '(masquerade)'
                end: '(?<!\\\\)(?=\\n)'
                captures:
                    1: name: 'keyword.control.gen'
                patterns: [
                    { include: '$self'}
                ]
            },
        ]
    }

    'preprocessor': {
        begin: '(?=#)'
        end: '(?<!\\\\)\\n'
        name: 'meta.preprocessor.gen'
        patterns: [
            { include: '#keyword' },
            { include: '#pragma' },
            { include: '#include' }
        ]
    }

    'section': {
        begin: '\\b(component|module|interface)\\b'
        name: 'meta.component-module-block.gen'
        end: ';'
        beginCaptures:
            1: name: 'keyword.control.gen'
        patterns: [
            {
                match: '([_a-zA-Z]\\w*)'
                name: 'entity.name.section.gen'
            },
            { include: '#comment-line' },
            { include: '#comment-block' },
            { include: '#block' }
        ]
    }

    'service': {
        begin: '\\b(function|activity|attribute)\\s*([a-zA-Z0-9_]*)\\s*'
        end: ';'
        name: 'meta.service-block.gen'
        beginCaptures:
            1: name: 'keyword.control.gen'
            2: name: 'entity.name.function.gen'
        patterns: [
            { include: '#param-service' },
            { include: '#block' },
        ]
    }

    'specifier': {
        match: '\\b(task|throw|interrupts?|after)\\s*[a-zA-Z_, ]*;'
        captures:
            1: name: 'keyword.other.gen'
    }

    'specifier-doc': {
        begin: '\\b(doc)\\b'
        end: ';'
        beginCaptures:
            1: name: 'keyword.other.gen'
    }

    'specifier-period': {
        begin: '\\b(period)\\b'
        end: ';'
        beginCaptures:
            1: name: 'keyword.other.gen'
    }

    'specifier-validate': {
        begin: '\\b(validate)\\b'
        end: ';'
        beginCaptures:
            1: name: 'keyword.other.gen'
        patterns: [
            { include: '#param' }
        ]
    }

    'storage-modifier': {
        match: '\\b(const)\\b'
        name: 'storage.modifier.gen'
    }

    'string': {
        begin: '"'
        end: '"'
        name: 'string.quoted.gen'
    }

    'struct': {
        begin: '\\b(struct|union|exception|enum)\\b'
        end: ';'
        name: 'meta.struct-block.gen'
        beginCaptures:
            1: name: 'keyword.control.gen'
        patterns: [
            {
                match: '([_a-zA-Z]\\w*)'
                name: 'entity.name.type.gen'
            },
            { include: '#comment-line' },
            { include: '#comment-block' },
            { include: '#block' }
        ]
    }

    'task': {
        begin: '\\b(task)\\b'
        end: ';'
        name: 'meta.task-block.gen'
        beginCaptures:
            1: name: 'keyword.control.gen'
        patterns: [
            {
                match: '([_a-zA-Z]\\w*)'
                name: 'entity.name.function.gen'
            },
            { include: '#self' },
            { include: '#block' }
        ]
    }

    'template': {
        begin: '(<)\\s*([a-zA-Z][a-zA-Z0-9_\\:]*)?\\s*,?\\s*([0-9]*)?'
        end: '(>)'
        beginCaptures:
            2: name: 'storage.type.gen'
            3: name: 'constant.numeric.gen'
    }

    'variable': {
        match: '([0-9a-zA-Z_:]*)\\s*([a-zA-Z_][0-9a-zA-Z_]*)(?:\\s=\\s*([0-9]*))?\\s*;'
        captures:
            1: name: 'storage.type.gen'
            3: name: 'constant.numeric.gen'
    }

    'yield': {
        begin: '\\b(yield)\\b'
        end: ';'
        beginCaptures:
            1: name: 'keyword.other.gen'
        patterns: [
            {
                match: '(\\b(pause::)?[\\w]+\\b)(?=\\s*(,|;))'
                name: 'entity.tag.gen'
            }
        ]
    }
